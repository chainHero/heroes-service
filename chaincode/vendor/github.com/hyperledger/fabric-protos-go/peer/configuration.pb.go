// Code generated by protoc-gen-go. DO NOT EDIT.
// source: peer/configuration.proto

package peer

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// AnchorPeers simply represents list of anchor peers which is used in ConfigurationItem
type AnchorPeers struct {
	AnchorPeers          []*AnchorPeer `protobuf:"bytes,1,rep,name=anchor_peers,json=anchorPeers,proto3" json:"anchor_peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *AnchorPeers) Reset()         { *m = AnchorPeers{} }
func (m *AnchorPeers) String() string { return proto.CompactTextString(m) }
func (*AnchorPeers) ProtoMessage()    {}
func (*AnchorPeers) Descriptor() ([]byte, []int) {
	return fileDescriptor_4978ae8738390a60, []int{0}
}

func (m *AnchorPeers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnchorPeers.Unmarshal(m, b)
}
func (m *AnchorPeers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnchorPeers.Marshal(b, m, deterministic)
}
func (m *AnchorPeers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorPeers.Merge(m, src)
}
func (m *AnchorPeers) XXX_Size() int {
	return xxx_messageInfo_AnchorPeers.Size(m)
}
func (m *AnchorPeers) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorPeers.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorPeers proto.InternalMessageInfo

func (m *AnchorPeers) GetAnchorPeers() []*AnchorPeer {
	if m != nil {
		return m.AnchorPeers
	}
	return nil
}

// AnchorPeer message structure which provides information about anchor peer, it includes host name,
// port number and peer certificate.
type AnchorPeer struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 int32    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnchorPeer) Reset()         { *m = AnchorPeer{} }
func (m *AnchorPeer) String() string { return proto.CompactTextString(m) }
func (*AnchorPeer) ProtoMessage()    {}
func (*AnchorPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_4978ae8738390a60, []int{1}
}

func (m *AnchorPeer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnchorPeer.Unmarshal(m, b)
}
func (m *AnchorPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnchorPeer.Marshal(b, m, deterministic)
}
func (m *AnchorPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnchorPeer.Merge(m, src)
}
func (m *AnchorPeer) XXX_Size() int {
	return xxx_messageInfo_AnchorPeer.Size(m)
}
func (m *AnchorPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_AnchorPeer.DiscardUnknown(m)
}

var xxx_messageInfo_AnchorPeer proto.InternalMessageInfo

func (m *AnchorPeer) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *AnchorPeer) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// APIResource represents an API resource in the peer whose ACL
// is determined by the policy_ref field
type APIResource struct {
	PolicyRef            string   `protobuf:"bytes,1,opt,name=policy_ref,json=policyRef,proto3" json:"policy_ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *APIResource) Reset()         { *m = APIResource{} }
func (m *APIResource) String() string { return proto.CompactTextString(m) }
func (*APIResource) ProtoMessage()    {}
func (*APIResource) Descriptor() ([]byte, []int) {
	return fileDescriptor_4978ae8738390a60, []int{2}
}

func (m *APIResource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_APIResource.Unmarshal(m, b)
}
func (m *APIResource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_APIResource.Marshal(b, m, deterministic)
}
func (m *APIResource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_APIResource.Merge(m, src)
}
func (m *APIResource) XXX_Size() int {
	return xxx_messageInfo_APIResource.Size(m)
}
func (m *APIResource) XXX_DiscardUnknown() {
	xxx_messageInfo_APIResource.DiscardUnknown(m)
}

var xxx_messageInfo_APIResource proto.InternalMessageInfo

func (m *APIResource) GetPolicyRef() string {
	if m != nil {
		return m.PolicyRef
	}
	return ""
}

// ACLs provides mappings for resources in a channel. APIResource encapsulates
// reference to a policy used to determine ACL for the resource
type ACLs struct {
	Acls                 map[string]*APIResource `protobuf:"bytes,1,rep,name=acls,proto3" json:"acls,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *ACLs) Reset()         { *m = ACLs{} }
func (m *ACLs) String() string { return proto.CompactTextString(m) }
func (*ACLs) ProtoMessage()    {}
func (*ACLs) Descriptor() ([]byte, []int) {
	return fileDescriptor_4978ae8738390a60, []int{3}
}

func (m *ACLs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ACLs.Unmarshal(m, b)
}
func (m *ACLs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ACLs.Marshal(b, m, deterministic)
}
func (m *ACLs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ACLs.Merge(m, src)
}
func (m *ACLs) XXX_Size() int {
	return xxx_messageInfo_ACLs.Size(m)
}
func (m *ACLs) XXX_DiscardUnknown() {
	xxx_messageInfo_ACLs.DiscardUnknown(m)
}

var xxx_messageInfo_ACLs proto.InternalMessageInfo

func (m *ACLs) GetAcls() map[string]*APIResource {
	if m != nil {
		return m.Acls
	}
	return nil
}

func init() {
	proto.RegisterType((*AnchorPeers)(nil), "protos.AnchorPeers")
	proto.RegisterType((*AnchorPeer)(nil), "protos.AnchorPeer")
	proto.RegisterType((*APIResource)(nil), "protos.APIResource")
	proto.RegisterType((*ACLs)(nil), "protos.ACLs")
	proto.RegisterMapType((map[string]*APIResource)(nil), "protos.ACLs.AclsEntry")
}

func init() { proto.RegisterFile("peer/configuration.proto", fileDescriptor_4978ae8738390a60) }

var fileDescriptor_4978ae8738390a60 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0xcd, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x49, 0x3f, 0x84, 0x4e, 0x3c, 0xc8, 0x0a, 0x12, 0x04, 0xa1, 0xe4, 0x54, 0xa5, 0x4d,
	0xa0, 0x2a, 0x88, 0xb7, 0x58, 0x3d, 0x08, 0x3d, 0x94, 0x3d, 0x7a, 0x29, 0xe9, 0x3a, 0xf9, 0xc0,
	0x98, 0x09, 0xb3, 0x89, 0x90, 0x9b, 0x7f, 0xba, 0x64, 0xb7, 0x4d, 0x3c, 0xed, 0xdb, 0xb7, 0xbf,
	0x37, 0x3c, 0x76, 0xc0, 0xab, 0x10, 0x39, 0x54, 0x54, 0x26, 0x79, 0xda, 0x70, 0x5c, 0xe7, 0x54,
	0x06, 0x15, 0x53, 0x4d, 0xe2, 0xcc, 0x1c, 0xda, 0x7f, 0x05, 0x37, 0x2a, 0x55, 0x46, 0xbc, 0x43,
	0x64, 0x2d, 0x1e, 0xe1, 0x3c, 0x36, 0xd7, 0x7d, 0x97, 0xd4, 0x9e, 0x33, 0x1f, 0x2f, 0xdc, 0xb5,
	0xb0, 0x21, 0x1d, 0x0c, 0xa8, 0x74, 0xe3, 0x21, 0xe6, 0x3f, 0x00, 0x0c, 0x4f, 0x42, 0xc0, 0x24,
	0x23, 0x5d, 0x7b, 0xce, 0xdc, 0x59, 0xcc, 0xa4, 0xd1, 0x9d, 0x57, 0x11, 0xd7, 0xde, 0x68, 0xee,
	0x2c, 0xa6, 0xd2, 0x68, 0x7f, 0x09, 0x6e, 0xb4, 0x7b, 0x97, 0xa8, 0xa9, 0x61, 0x85, 0xe2, 0x06,
	0xa0, 0xa2, 0x22, 0x57, 0xed, 0x9e, 0x31, 0x39, 0x86, 0x67, 0xd6, 0x91, 0x98, 0xf8, 0xbf, 0x0e,
	0x4c, 0xa2, 0xcd, 0x56, 0x8b, 0x3b, 0x98, 0xc4, 0xaa, 0x38, 0x75, 0xbb, 0xea, 0xbb, 0x6d, 0xb6,
	0x3a, 0x88, 0x54, 0xa1, 0xdf, 0xca, 0x9a, 0x5b, 0x69, 0x98, 0xeb, 0x2d, 0xcc, 0x7a, 0x4b, 0x5c,
	0xc0, 0xf8, 0x0b, 0xdb, 0xe3, 0xe4, 0x4e, 0x8a, 0x5b, 0x98, 0xfe, 0xc4, 0x45, 0x83, 0xa6, 0x96,
	0xbb, 0xbe, 0xec, 0x67, 0x0d, 0xb5, 0xa4, 0x25, 0x9e, 0x47, 0x4f, 0xce, 0x8b, 0x04, 0x9f, 0x38,
	0x0d, 0xb2, 0xb6, 0x42, 0x2e, 0xf0, 0x33, 0x45, 0x0e, 0x92, 0xf8, 0xc0, 0xb9, 0x3a, 0xe5, 0xba,
	0x4f, 0xfb, 0x58, 0xa6, 0x79, 0x9d, 0x35, 0x87, 0x40, 0xd1, 0x77, 0xf8, 0x0f, 0x0d, 0x2d, 0xba,
	0xb2, 0xe8, 0x2a, 0xa5, 0xb0, 0xa3, 0x0f, 0x76, 0x11, 0xf7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x10, 0x49, 0xdc, 0x44, 0xab, 0x01, 0x00, 0x00,
}
